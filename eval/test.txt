# test_1/src/clients/doc_intelligence_client.py
import os
import json
from datetime import datetime
from pathlib import Path

from azure.core.credentials import AzureKeyCredential
from azure.ai.documentintelligence import DocumentIntelligenceClient

import config

def analyze_pdf(pdf_bytes: bytes, original_filename: str) -> dict:
    """
    Analyzes a PDF file from memory using Azure Document Intelligence.

    Saves the full JSON response to the output directory and returns it
    as a dictionary.

    Args:
        pdf_bytes: The raw byte content of the PDF file.
        original_filename: The original name of the uploaded file.

    Returns:
        A dictionary containing the JSON analysis result.

    Raises:
        ValueError: If Document Intelligence credentials are not set in the .env file.
    """
    # 1. Load credentials from environment variables
    endpoint = os.getenv("AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT")
    key = os.getenv("AZURE_DOCUMENT_INTELLIGENCE_KEY")

    if not endpoint or not key:
        raise ValueError(
            "Azure Document Intelligence credentials are not configured. "
            "Set AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT and AZURE_DOCUMENT_INTELLIGENCE_KEY in your .env file."
        )

    # 2. Initialize the client
    print(f"Connecting to Document Intelligence service for '{original_filename}'...")
    document_intelligence_client = DocumentIntelligenceClient(
        endpoint=endpoint, credential=AzureKeyCredential(key)
    )

    # 3. Send the PDF bytes for analysis
    poller = document_intelligence_client.begin_analyze_document(
        "prebuilt-layout", analyze_request=pdf_bytes, content_type="application/pdf"
    )
    result = poller.result()
    print("-> Analysis complete.")

    # 4. Convert the result object to a dictionary
    result_dict = result.to_dict()

    # 5. Save the JSON output to a file as requested
    output_dir = Path(config.OUTPUT_DIR)
    output_dir.mkdir(exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    base_name = Path(original_filename).stem
    output_filename = f"doc_intelligence_{base_name}_{timestamp}.json"
    output_path = output_dir / output_filename

    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(result_dict, f, ensure_ascii=False, indent=4)
        print(f"-> Saved Document Intelligence JSON to '{output_path}'")
    except Exception as e:
        print(f"Warning: Could not save JSON output for '{original_filename}'. Reason: {e}")

    # 6. Return the dictionary for in-memory processing
    return result_dict
