# test_1/src/reporting/excel_writer.py
import io
from pathlib import Path
from typing import List, Dict, Any
import pandas as pd

AlignedPair = Dict[str, Any]
EvaluationFinding = Dict[str, Any]

def save_alignment_report(aligned_data: List[AlignedPair], filepath: Path) -> None:
    """
    Saves the document alignment data to an Excel file.
    Now includes margin_score if it's available in the data.
    """
    if not aligned_data:
        print("Warning: No aligned data to save to Excel.")
        return

    report_data = []
    # Check if margin_score is present in the first pair
    has_margin_score = 'margin_score' in aligned_data[0]

    for pair in aligned_data:
        eng_item = pair.get('english')
        ger_item = pair.get('german')
        row = {
            "English": eng_item.get('text', '') if eng_item else "--- OMITTED ---",
            "German": ger_item.get('text', '') if ger_item else "--- ADDED ---",
            "Similarity": f"{pair.get('similarity', 0.0):.4f}",
            "Type": (eng_item.get('type') if eng_item else ger_item.get('type', 'N/A')),
            "English Page": (eng_item.get('page') if eng_item else 'N/A'),
            "German Page": (ger_item.get('page') if ger_item else 'N/A')
        }
        if has_margin_score:
            row["Margin Score"] = f"{pair.get('margin_score', 0.0):.4f}"
        report_data.append(row)

    df = pd.DataFrame(report_data)
    try:
        df.to_excel(filepath, index=False, engine='openpyxl')
    except Exception as e:
        print(f"Error: Could not write alignment report to '{filepath}'. Reason: {e}")


def save_evaluation_report(evaluation_results: List[EvaluationFinding], filepath: Path) -> None:
    """Saves the AI evaluation findings to a separate Excel report."""
    if not evaluation_results:
        print("No evaluation findings to save.")
        return
    evaluation_results.sort(key=lambda x: x.get('page', 0))
    df = pd.DataFrame(evaluation_results)
    desired_columns = [
        "page", "type", "suggestion", "english_text", "german_text",
        "original_phrase", "translated_phrase"
    ]
    final_columns = [col for col in desired_columns if col in df.columns]
    df = df[final_columns]
    try:
        df.to_excel(filepath, index=False, sheet_name='Evaluation_Findings')
    except Exception as e:
        print(f"Error: Could not write evaluation report to '{filepath}'. Reason: {e}")


def save_sectionwise_debug_report(
    section_data: Dict[str, List[AlignedPair]],
    filepath: Path
) -> None:
    """
    Saves a detailed, multi-sheet Excel debug report with one sheet per ToC section.
    """
    if not section_data:
        print("Warning: No section data provided for the debug report.")
        return

    try:
        with pd.ExcelWriter(filepath, engine='openpyxl') as writer:
            for section_title, aligned_pairs in section_data.items():
                # Sanitize sheet title (Excel has a 31-char limit and restrictions)
                safe_sheet_name = "".join(c for c in section_title if c.isalnum() or c in " ").strip()
                safe_sheet_name = safe_sheet_name[:31]

                if not aligned_pairs:
                    continue

                report_data = []
                for pair in aligned_pairs:
                    eng_item = pair.get('english')
                    ger_item = pair.get('german')
                    report_data.append({
                        "English Text": eng_item.get('text', '') if eng_item else "--- OMITTED ---",
                        "German Text": ger_item.get('text', '') if ger_item else "--- ADDED ---",
                        "Cosine Similarity": f"{pair.get('similarity', 0.0):.4f}",
                        "Margin Score": f"{pair.get('margin_score', 0.0):.4f}",
                        "Content Type": (eng_item.get('type') if eng_item else ger_item.get('type', 'N/A')),
                        "English Page": (eng_item.get('page') if eng_item else 'N/A'),
                        "German Page": (ger_item.get('page') if ger_item else 'N/A')
                    })
                
                df_section = pd.DataFrame(report_data)
                df_section.to_excel(writer, sheet_name=safe_sheet_name, index=False)
        print(f"-> Section-wise debug report saved to: {filepath.resolve()}")
    except Exception as e:
        print(f"Error: Could not write section-wise debug report to '{filepath}'. Reason: {e}")


def create_excel_report_in_memory(evaluation_results: List[EvaluationFinding]) -> bytes:
    """
    Creates the evaluation Excel report in memory and returns it as bytes.
    """
    if not evaluation_results:
        return b''

    evaluation_results.sort(key=lambda x: x.get('page', 0))
    df = pd.DataFrame(evaluation_results)
    desired_columns = [
        "page", "type", "suggestion", "english_text", "german_text",
        "original_phrase", "translated_phrase"
    ]
    final_columns = [col for col in desired_columns if col in df.columns]
    df = df[final_columns]

    output_buffer = io.BytesIO()
    with pd.ExcelWriter(output_buffer, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Evaluation_Findings')

    return output_buffer.getvalue()
